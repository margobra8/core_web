<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>routes on CORE Study Hub</title><link>/tags/routes/</link><description>Recent content in routes on CORE Study Hub</description><generator>Hugo -- gohugo.io</generator><language>es</language><copyright>Marcos Gómez</copyright><lastBuildDate>Mon, 31 May 2021 19:04:17 +0200</lastBuildDate><atom:link href="/tags/routes/index.xml" rel="self" type="application/rss+xml"/><item><title>Sistema de puntuaciones</title><link>/posts/sistema-de-puntuaciones/</link><pubDate>Mon, 31 May 2021 19:04:17 +0200</pubDate><guid>/posts/sistema-de-puntuaciones/</guid><description>Cuando nos pidan implementar una funcionalidad nueva que se tenga que ver en una nueva &amp;ldquo;página&amp;rdquo; tendremos que tocar las rutas (routes/index.js), las vistas (views/*) e implementar una nueva funcionalidad en el controlador que toque (controllers/*) y en este caso los modelos (models/*).
A mí personalmente me gusta empezar por lo fácil, implementar la ruta o rutas.
Implementación de la ruta Para implementar esta funcionalidad vamos a hacer que el usuario pueda visualizar la puntuación de los grupos en una nueva página.</description><content>&lt;p>Cuando nos pidan implementar una funcionalidad nueva que se tenga que ver en una nueva &amp;ldquo;página&amp;rdquo; tendremos que tocar las rutas (&lt;code>routes/index.js&lt;/code>), las vistas (&lt;code>views/*&lt;/code>) e implementar una nueva funcionalidad en el controlador que toque (&lt;code>controllers/*&lt;/code>) y en este caso los modelos (&lt;code>models/*&lt;/code>).&lt;/p>
&lt;p>A mí personalmente me gusta empezar por lo fácil, implementar la ruta o rutas.&lt;/p>
&lt;h2 id="implementación-de-la-ruta">Implementación de la ruta&lt;/h2>
&lt;p>Para implementar esta funcionalidad vamos a hacer que el usuario pueda visualizar la puntuación de los grupos en una nueva página. Para ello implementaremos una primitiva HTTP &lt;code>GET /scores/&lt;/code> en la que se visualizará una tabla con todas las puntuaciones de todos los grupos. Para gestionar el tema de las puntuaciones crearemos un controlador que se encarge de gestionar todas las primitivas relacionadas con las puntuaciones.&lt;/p>
&lt;p>De momento supondremos que este controller lo llamaremos &lt;code>scoreController&lt;/code>. Vamos a editar el documento de rutas para incluir la nueva ruta.&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="136285947" type="checkbox" />
&lt;label for="136285947">
&lt;span class="collapsable-code__language">js&lt;/span>
&lt;span class="collapsable-code__title">routes/index.js&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-js" >&lt;code>
var express = require(&amp;#34;express&amp;#34;);
var router = express.Router();
const quizController = require(&amp;#34;../controllers/quiz&amp;#34;);
const userController = require(&amp;#34;../controllers/user&amp;#34;);
const sessionController = require(&amp;#34;../controllers/session&amp;#34;);
const groupController = require(&amp;#34;../controllers/group&amp;#34;);
// añadimos nuestro controlador que luego crearemos
const scoreController = require(&amp;#34;../controllers/score&amp;#34;);
[...]
// añadimos una nueva ruta al final del archivo para satisfacer nuestro objetivo
router.get(&amp;#34;/scores&amp;#34;, scoreController.index);
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>De esta manera, cuando el usuario haga un GET a esta ruta se pasará el control al middleware &lt;code>index&lt;/code> de &lt;code>scoreController&lt;/code> que ahora crearemos.&lt;/p>
&lt;h1 id="modificación-del-modelo">Modificación del modelo&lt;/h1>
&lt;p>Para acomodar las puntuaciones por grupo tenemos que modificar el modelo de &lt;code>Group&lt;/code> añadiendo un campo de puntuación, eso lo haremos en el archivo del modelo correspondiente:&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="532718649" type="checkbox" />
&lt;label for="532718649">
&lt;span class="collapsable-code__language">js&lt;/span>
&lt;span class="collapsable-code__title">routes/index.js&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-js" >&lt;code>
const { Model } = require(&amp;#34;sequelize&amp;#34;);
// Definition of the Quiz model:
module.exports = (sequelize, DataTypes) =&amp;gt; {
class Group extends Model {}
Group.init(
{
name: {
type: DataTypes.STRING,
unique: true,
validate: { notEmpty: { msg: &amp;#34;Group name must not be empty&amp;#34; } },
},
// añadimos el nuevo campo
score: {
type: DataTypes.INTEGER,
defaultValue: 0
}
},
{
sequelize,
}
);
return Group;
};
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Ahora podemos almacenar en la BBDD la puntuación de cada grupo. Para ello modificaremos &lt;code>groupPlay&lt;/code> para ello.&lt;/p>
&lt;h2 id="creación-del-controllador">Creación del controllador&lt;/h2>
&lt;p>Crearemos un nuevo archivo &lt;code>controllers/score.js&lt;/code> para este fin e implementaremos el método index.&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="426389175" type="checkbox" />
&lt;label for="426389175">
&lt;span class="collapsable-code__language">js&lt;/span>
&lt;span class="collapsable-code__title">controllers/score.js&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-js" >&lt;code>
const Sequelize = require(&amp;#34;sequelize&amp;#34;);
const Op = Sequelize.Op;
const { models } = require(&amp;#34;../models&amp;#34;)
[...]
// GET /index
exports.index = async (req, res, next) =&amp;gt; {
try {
const groups = await models.Group.findAll();
res.render(&amp;#34;scores/index.ejs&amp;#34;, {
groups,
});
} catch (error) {
next(error);
}
};
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Se puede ver cómo el código es casi igual al index de groups, y esto es pq al final estamos obteniendo en un array los grupos que hay y sus atributos, entre ellos nombre y puntuación. La diferencia es en el &lt;code>res.render(...)&lt;/code> que ahora llamamos a la nueva vista que crearemos.&lt;/p>
&lt;h2 id="implementación-de-la-vista">Implementación de la vista&lt;/h2>
&lt;p>Crearemos una nueva vista para ello: &lt;code>views/scores/index.ejs&lt;/code> basándonos en el intex de la vista de groups ya hecha.&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="732198456" type="checkbox" />
&lt;label for="732198456">
&lt;span class="collapsable-code__language">html&lt;/span>
&lt;span class="collapsable-code__title">views/scores/index.ejs&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-html" >&lt;code>
&amp;lt;h1&amp;gt;Scores:&amp;lt;/h1&amp;gt;
&amp;lt;table&amp;gt;
&amp;lt;% for (var i in groups) { %&amp;gt; &amp;lt;% var group = groups[i]; %&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;
&amp;lt;a href=&amp;#34;/groups/&amp;lt;%= group.id %&amp;gt;/randomplay&amp;#34;&amp;gt;&amp;lt;%= group.name %&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;%= group.score %&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;% } %&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="modificación-de-groupcheck">Modificación de &lt;code>groupCheck&lt;/code>&lt;/h2>
&lt;p>Para ir sumando las puntuaciones, modificaremos el controlador de groupCheck. En mi caso lo he llamado randomCheck pero es distinto al de los quizzes individuales porque está en el archivo &lt;code>controllers/group.js&lt;/code>.&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="917328546" type="checkbox" />
&lt;label for="917328546">
&lt;span class="collapsable-code__language">js&lt;/span>
&lt;span class="collapsable-code__title">controllers/group.js&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-js" >&lt;code>
[...]
exports.randomCheck = async (req, res, next) =&amp;gt; {
const curGroup = req.load.group;
try {
req.session.groupsRandomPlay = req.session.groupsRandomPlay || {};
req.session.groupsRandomPlay[curGroup.id] = req.session.groupsRandomPlay[
curGroup.id
] || {
resolved: [],
lastQuizId: 0,
};
const answer = req.query.answer || &amp;#34;&amp;#34;;
const result =
answer.toLowerCase().trim() === req.load.quiz.answer.toLowerCase().trim();
if (result) {
req.session.groupsRandomPlay[curGroup.id].lastQuizId = 0;
if (
req.session.groupsRandomPlay[curGroup.id].resolved.indexOf(
req.load.quiz.id
) === -1
) {
req.session.groupsRandomPlay[curGroup.id].resolved.push(
req.load.quiz.id
);
}
const score = req.session.groupsRandomPlay[curGroup.id].resolved.length;
// actualizamos el score del group en cuestión
curGroup = await curGroup.save({fields: [&amp;#34;score&amp;#34;]});
res.render(&amp;#34;groups/random_result&amp;#34;, {
group: curGroup,
result,
answer,
score,
});
} else {
const score = req.session.groupsRandomPlay[curGroup.id].resolved.length;
delete req.session.groupsRandomPlay[curGroup.id];
res.render(&amp;#34;groups/random_result&amp;#34;, {
group: curGroup,
result,
answer,
score,
});
}
} catch (error) {
next(error);
}
};
[...]
&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="adición-del-enlace">Adición del enlace&lt;/h2>
&lt;p>Ahora sólo nos falta añadir el enlace en el menú de navegación.&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="562794183" type="checkbox" />
&lt;label for="562794183">
&lt;span class="collapsable-code__language">html&lt;/span>
&lt;span class="collapsable-code__title">views/scores/index.ejs&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-html" >&lt;code>
&amp;lt;nav class=&amp;#34;main&amp;#34; id=&amp;#34;mainNav&amp;#34; role=&amp;#34;navigation&amp;#34;&amp;gt;
&amp;lt;a href=&amp;#34;/&amp;#34;&amp;gt;Home&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;#34;/quizzes&amp;#34;&amp;gt;Quizzes&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;#34;/author&amp;#34;&amp;gt;Author&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;#34;/groups&amp;#34;&amp;gt;Groups&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;#34;/scores&amp;#34;&amp;gt;Groups Scores&amp;lt;/a&amp;gt;
&amp;lt;% if (locals.loginUser) { %&amp;gt;
&amp;lt;a href=&amp;#34;/users&amp;#34;&amp;gt;Users&amp;lt;/a&amp;gt;
&amp;lt;% } %&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Y ya estaría!!!! :)&lt;/p></content></item></channel></rss>